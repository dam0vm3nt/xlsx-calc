{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/RawValue.js","webpack:///./src/int_2_col_str.js","webpack:///./src/col_str_2_int.js","webpack:///./src/RefValue.js","webpack:///./src/getSanitizedSheetName.js","webpack:///./src/Range.js","webpack:///./src/find_all_cells_with_formulas.js","webpack:///./src/index.js","webpack:///./src/exec_formula.js","webpack:///./src/Exp.js","webpack:///./src/UserFnExecutor.js","webpack:///./src/UserRawFnExecutor.js","webpack:///./src/formulas.js","webpack:///./src/formulas-raw.js","webpack:///./src/Calculator.js"],"names":["root","factory","exports","module","define","amd","a","i","this","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","setValue","v","calc","modulo","dividend","columnName","guard","String","fromCharCode","col_str","colstr","replace","length","Math","pow","charCodeAt","getSanitizedSheetName","str_expression","formula","self","parseRef","sheet","sheet_name","cell_name","indexOf","aux","split","wb","Sheets","Error","cell_full_name","resolved_ref","ref_cell","formula_ref","console","log","w","status","exec_formula","quotedMatch","match","col_str_2_int","int_2_col_str","range_expression","max_row","arr","min_row","parseInt","str_max_row","min_col","max_col","matrix","row","push","j","cells","f","cell","find_all_cells_with_formulas","Calculator","mymodule","workbook","formulas","calculator","set_fx","exec_fx","import_functions","import_raw_functions","xlsx_Fx","Exp","RawValue","UserFnExecutor","UserRawFnExecutor","xlsx_raw_Fx","common_operations","*","+","-","/","^","&","<",">","=","functions","opts","formulajs","prefix","obj","override","my_assign","dest","source","JSON","parse","stringify","k","build_expression","root_exp","str_formula","substr","exp_obj","buffer","is_string","was_string","fn_stack","exp","trim_buffer","trim","special","special_raw","stack","pop","update_cell_value","fn","args","apply","RefValue","Range","exp_id","last_arg","checkVariable","exec","op","splice","e","id","errorValues","#NULL!","#DIV/0!","#VALUE!","#REF!","#NAME?","#NUM!","#N/A","#GETTING_DATA","undefined","message","concat","exec_minus","b","isNaN","user_function","result","map","FLOOR","floor","_xlfn.FLOOR.MATH","ABS","abs","SQRT","sqrt","VLOOKUP","return_index","MAX","max","arguments","arg","Array","isArray","SUM","sum","MIN","CONCATENATE","PMT","rate_per_period","number_of_payments","present_value","future_value","type","q","COUNTA","counta","IRR","range","guess","min","guest","NPV","NORM.INV","normsInv","_xlfn.NORM.INV","STDEV","array","getArrayOfNumbers","mean","reduce","_mean","dev","itm","AVERAGE","avg","EXP","E","LN","_xlfn.VAR.P","var_p","VAR.P","_xlfn.COVARIANCE.P","covariance_p","COVARIANCE.P","TRIM","LEN","ISBLANK","is_blank","HLOOKUP","needle","table","index","exactmatch","toLowerCase","INDEX","row_num","column_num","MATCH","lookupValue","matchType","indexValue","idx","SUMPRODUCT","parseNumber","string","parseFloat","matrixArray","getRowCount","getColCount","rowCount","colCount","consistentSizeRanges","product","_i","_ij","arrays","ISNUMBER","x","inv_n","avg_a","avg_b","average","mu","sigma","Infinity","val","OFFSET","cell_ref","rows","columns","height","width","ref_value","parsed_ref","col","end_range","IFERROR","onerrorvalue","IF","condition","_then","_else","AND","[object Object]","expressions","variables","var_name","variable","forEach","setVarOfExpression","vars"],"mappings":"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","file":"xlsx-calc.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","\"use strict\";\n\nmodule.exports = function RawValue(value) {\n    this.setValue = function(v) {\n        value = v;\n    };\n    this.calc = function() {\n        return value;\n    };\n};\n","\"use strict\";\n\nmodule.exports = function int_2_col_str(n) {\n    var dividend = n + 1;\n    var columnName = '';\n    var modulo;\n    var guard = 10;\n    while (dividend > 0 && guard--) {\n        modulo = (dividend - 1) % 26;\n        columnName = String.fromCharCode(modulo + 65) + columnName;\n        dividend = (dividend - modulo - 1) / 26;\n    }\n    return columnName;\n};","\"use strict\";\n\nmodule.exports = function col_str_2_int(col_str) {\n    var r = 0;\n    var colstr = col_str.replace(/[0-9]+$/, '');\n    for (var i = colstr.length; i--;) {\n        r += Math.pow(26, colstr.length - i - 1) * (colstr.charCodeAt(i) - 64);\n    }\n    return r - 1;\n};","\"use strict\";\n\nconst getSanitizedSheetName = require('./getSanitizedSheetName.js');\n\nmodule.exports = function RefValue(str_expression, formula) {\n    var self = this;\n    this.name = 'RefValue';\n    this.str_expression = str_expression;\n    this.formula = formula;\n\n    self.parseRef = function() {\n        var sheet, sheet_name, cell_name, cell_full_name;\n        if (str_expression.indexOf('!') != -1) {\n            var aux = str_expression.split('!');\n            sheet_name = getSanitizedSheetName(aux[0]);\n            sheet = formula.wb.Sheets[sheet_name];\n            cell_name = aux[1];\n        }\n        else {\n            sheet = formula.sheet;\n            sheet_name = formula.sheet_name;\n            cell_name = str_expression;\n        }\n        if (!sheet) {\n            throw Error(\"Sheet \" + sheet_name + \" not found.\");\n        }\n        cell_full_name = sheet_name + '!' + cell_name;\n        return {\n            sheet: sheet,\n            sheet_name: sheet_name,\n            cell_name: cell_name,\n            cell_full_name: cell_full_name\n        };\n    };\n\n    this.calc = function() {\n        var resolved_ref = self.parseRef();\n        var sheet = resolved_ref.sheet;\n        var cell_name = resolved_ref.cell_name;\n        var cell_full_name = resolved_ref.cell_full_name;\n        var ref_cell = sheet[cell_name];\n        if (!ref_cell) {\n            return null;\n        }\n        var formula_ref = formula.formula_ref[cell_full_name];\n        if (formula_ref) {\n            if (formula_ref.status === 'new') {\n                formula.exec_formula(formula_ref);\n                if (ref_cell.t === 'e') {\n                    console.log('ref is an error with new formula', cell_name);\n                    throw new Error(ref_cell.w);\n                }\n                return ref_cell.v;\n            }\n            else if (formula_ref.status === 'working') {\n                throw new Error('Circular ref');\n            }\n            else if (formula_ref.status === 'done') {\n                if (ref_cell.t === 'e') {\n                    console.log('ref is an error after formula eval');\n                    throw new Error(ref_cell.w);\n                }\n                return ref_cell.v;\n            }\n        }\n        else {\n            if (ref_cell.t === 'e') {\n                console.log('ref is an error with no formula', cell_name);\n                throw new Error(ref_cell.w);\n            }\n            return ref_cell.v;\n        }\n    };\n};\n","\"use strict\";\n\nmodule.exports = function getSanitizedSheetName(sheet_name) {\n    var quotedMatch = sheet_name.match(/^'(.*)'$/);\n    if (quotedMatch) {\n        return quotedMatch[1];\n    }\n    else {\n        return sheet_name;\n    }\n};\n","\"use strict\";\n\nconst col_str_2_int = require('./col_str_2_int.js');\nconst int_2_col_str = require('./int_2_col_str.js');\nconst getSanitizedSheetName = require('./getSanitizedSheetName.js');\n\nmodule.exports = function Range(str_expression, formula) {\n    this.calc = function() {\n        var range_expression, sheet_name, sheet;\n        if (str_expression.indexOf('!') != -1) {\n            var aux = str_expression.split('!');\n            sheet_name = getSanitizedSheetName(aux[0]);\n            range_expression = aux[1];\n        }\n        else {\n            sheet_name = formula.sheet_name;\n            range_expression = str_expression;\n        }\n        sheet = formula.wb.Sheets[sheet_name];\n        var arr = range_expression.split(':');\n        var min_row = parseInt(arr[0].replace(/^[A-Z]+/, ''), 10) || 0;\n        var str_max_row = arr[1].replace(/^[A-Z]+/, '');\n        var max_row;\n        if (str_max_row === '' && sheet['!ref']) {\n            str_max_row = sheet['!ref'].split(':')[1].replace(/^[A-Z]+/, '');\n        }\n        // the max is 1048576, but TLE\n        max_row = parseInt(str_max_row == '' ? '500000' : str_max_row, 10);\n        var min_col = col_str_2_int(arr[0]);\n        var max_col = col_str_2_int(arr[1]);\n        var matrix = [];\n        for (var i = min_row; i <= max_row; i++) {\n            var row = [];\n            matrix.push(row);\n            for (var j = min_col; j <= max_col; j++) {\n                var cell_name = int_2_col_str(j) + i;\n                var cell_full_name = sheet_name + '!' + cell_name;\n                if (formula.formula_ref[cell_full_name]) {\n                    if (formula.formula_ref[cell_full_name].status === 'new') {\n                        formula.exec_formula(formula.formula_ref[cell_full_name]);\n                    }\n                    else if (formula.formula_ref[cell_full_name].status === 'working') {\n                        throw new Error('Circular ref');\n                    }\n                    row.push(sheet[cell_name].v);\n                }\n                else if (sheet[cell_name]) {\n                    row.push(sheet[cell_name].v);\n                }\n                else {\n                    row.push(null);\n                }\n            }\n        }\n        return matrix;\n    };\n};\n","\"use strict\";\n\nmodule.exports = function find_all_cells_with_formulas(wb, exec_formula) {\n    let formula_ref = {};\n    let cells = [];\n    for (let sheet_name in wb.Sheets) {\n        let sheet = wb.Sheets[sheet_name];\n        for (let cell_name in sheet) {\n            if (sheet[cell_name] && sheet[cell_name].f) {\n                let formula = formula_ref[sheet_name + '!' + cell_name] = {\n                    formula_ref: formula_ref,\n                    wb: wb,\n                    sheet: sheet,\n                    sheet_name: sheet_name,\n                    cell: sheet[cell_name],\n                    name: cell_name,\n                    status: 'new',\n                    exec_formula: exec_formula\n                };\n                cells.push(formula);\n            }\n        }\n    }\n    return cells;\n};\n","\"use strict\";\n\nconst int_2_col_str = require('./int_2_col_str.js');\nconst col_str_2_int = require('./col_str_2_int.js');\nconst exec_formula = require('./exec_formula.js');\nconst find_all_cells_with_formulas = require('./find_all_cells_with_formulas.js');\nconst Calculator = require('./Calculator.js');\n\nvar mymodule = function(workbook) {\n    var formulas = find_all_cells_with_formulas(workbook, exec_formula);\n    for (var i = formulas.length - 1; i >= 0; i--) {\n        exec_formula(formulas[i]);\n    }\n};\n\nmymodule.calculator = function calculator(workbook) {\n    return new Calculator(workbook, exec_formula);\n};\n\nmymodule.set_fx = exec_formula.set_fx;\nmymodule.exec_fx = exec_formula.exec_fx;\nmymodule.col_str_2_int = col_str_2_int;\nmymodule.int_2_col_str = int_2_col_str;\nmymodule.import_functions = exec_formula.import_functions;\nmymodule.import_raw_functions = exec_formula.import_raw_functions;\nmymodule.xlsx_Fx = exec_formula.xlsx_Fx;\n\n\n\nmodule.exports = mymodule;","\"use strict\";\n\nconst Exp = require('./Exp.js');\nconst RawValue = require('./RawValue.js');\nconst UserFnExecutor = require('./UserFnExecutor.js');\nconst UserRawFnExecutor = require('./UserRawFnExecutor.js');\n\nvar xlsx_Fx = {};\nvar xlsx_raw_Fx = {};\n\nimport_functions(require('./formulas.js'));\nimport_raw_functions(require('./formulas-raw.js'));\n\nconst common_operations = {\n    '*': 'multiply',\n    '+': 'plus',\n    '-': 'minus',\n    '/': 'divide',\n    '^': 'power',\n    '&': 'concat',\n    '<': 'lt',\n    '>': 'gt',\n    '=': 'eq'\n};\n\nfunction import_raw_functions(functions, opts) {\n    for (var key in functions) {\n        xlsx_raw_Fx[key] = functions[key];\n    }\n}\n\nfunction import_functions(formulajs, opts) {\n    opts = opts || {};\n    var prefix = opts.prefix || '';\n    for (var key in formulajs) {\n        var obj = formulajs[key];\n        if (typeof(obj) === 'function') {\n            if (opts.override || !xlsx_Fx[prefix + key]) {\n                xlsx_Fx[prefix + key] = obj;\n            }\n            // else {\n            //     console.log(prefix + key, 'already exists.');\n            //     console.log('  to override:');\n            //     console.log('    XLSX_CALC.import_functions(yourlib, {override: true})');\n            // }\n        }\n        else if (typeof(obj) === 'object') {\n            import_functions(obj, my_assign(opts, { prefix: key + '.' }));\n        }\n    }\n}\n\nfunction my_assign(dest, source) {\n    var obj = JSON.parse(JSON.stringify(dest));\n    for (var k in source) {\n        obj[k] = source[k];\n    }\n    return obj;\n}\n\nfunction build_expression(formula) {\n    formula.status = 'working';\n    var root_exp;\n    var str_formula = formula.cell.f;\n    if (str_formula[0] == '=') {\n        str_formula = str_formula.substr(1);\n    }\n    var exp_obj = root_exp = new Exp(formula);\n    var buffer = '',\n        is_string = false,\n        was_string = false;\n    var fn_stack = [{\n        exp: exp_obj\n    }];\n    for (var i = 0; i < str_formula.length; i++) {\n        if (str_formula[i] == '\"') {\n            if (is_string) {\n                exp_obj.push(new RawValue(buffer));\n                is_string = false;\n                was_string = true;\n            }\n            else {\n                is_string = true;\n            }\n            buffer = '';\n        }\n        else if (is_string) {\n            buffer += str_formula[i];\n        }\n        else if (str_formula[i] == '(') {\n            var o, trim_buffer = buffer.trim(),\n                special = xlsx_Fx[trim_buffer];\n            var special_raw = xlsx_raw_Fx[trim_buffer];\n            if (special_raw) {\n                special = new UserRawFnExecutor(special_raw, formula);\n            }\n            else if (special) {\n                special = new UserFnExecutor(special, formula);\n            }\n            else if (trim_buffer) {\n                //Error: \"Worksheet 1\"!D145: Function INDEX not found\n                throw new Error('\"' + formula.sheet_name + '\"!' + formula.name + ': Function ' + buffer + ' not found');\n            }\n            o = new Exp(formula);\n            fn_stack.push({\n                exp: o,\n                special: special\n            });\n            exp_obj = o;\n            buffer = '';\n        }\n        else if (common_operations[str_formula[i]]) {\n            if (!was_string) {\n                exp_obj.push(buffer);\n            }\n            was_string = false;\n            exp_obj.push(str_formula[i]);\n            buffer = '';\n        }\n        else if (str_formula[i] === ',' && fn_stack[fn_stack.length - 1].special) {\n            was_string = false;\n            fn_stack[fn_stack.length - 1].exp.push(buffer);\n            fn_stack[fn_stack.length - 1].special.push(fn_stack[fn_stack.length - 1].exp);\n            fn_stack[fn_stack.length - 1].exp = exp_obj = new Exp(formula);\n            buffer = '';\n        }\n        else if (str_formula[i] == ')') {\n            var v, stack = fn_stack.pop();\n            exp_obj = stack.exp;\n            exp_obj.push(buffer);\n            v = exp_obj;\n            buffer = '';\n            exp_obj = fn_stack[fn_stack.length - 1].exp;\n            if (stack.special) {\n                stack.special.push(v);\n                exp_obj.push(stack.special);\n            }\n            else {\n                exp_obj.push(v);\n            }\n        }\n        else {\n            buffer += str_formula[i];\n        }\n    }\n    root_exp.push(buffer);\n    return root_exp;\n}\n\nfunction exec_formula(formula) {\n    let root_exp = build_expression(formula);\n    root_exp.update_cell_value();\n}\n\nexec_formula.set_fx = function set_fx(name, fn) {\n    xlsx_Fx[name] = fn;\n};\n\nexec_formula.exec_fx = function exec_fx(name, args) {\n    return xlsx_Fx[name].apply(this, args);\n};\n\nexec_formula.import_functions = import_functions;\nexec_formula.import_raw_functions = import_raw_functions;\nexec_formula.build_expression = build_expression;\nexec_formula.xlsx_Fx = xlsx_Fx;\nmodule.exports = exec_formula;\n","\"use strict\";\n\nconst RawValue = require('./RawValue.js');\nconst RefValue = require('./RefValue.js');\nconst Range = require('./Range.js');\n\nvar exp_id = 0;\n\nmodule.exports = function Exp(formula) {\n    var self = this;\n    self.id = ++exp_id;\n    self.args = [];\n    self.name = 'Expression';\n    self.update_cell_value = update_cell_value;\n    self.formula = formula;\n    \n    function update_cell_value() {\n        try {\n            formula.cell.v = self.calc();\n            if (typeof(formula.cell.v) === 'string') {\n                formula.cell.t = 's';\n            }\n            else if (typeof(formula.cell.v) === 'number') {\n                formula.cell.t = 'n';\n            }\n        }\n        catch (e) {\n            var errorValues = {\n                '#NULL!': 0x00,\n                '#DIV/0!': 0x07,\n                '#VALUE!': 0x0F,\n                '#REF!': 0x17,\n                '#NAME?': 0x1D,\n                '#NUM!': 0x24,\n                '#N/A': 0x2A,\n                '#GETTING_DATA': 0x2B\n            };\n            if (errorValues[e.message] !== undefined) {\n                formula.cell.t = 'e';\n                formula.cell.w = e.message;\n                formula.cell.v = errorValues[e.message];\n            }\n            else {\n                throw e;\n            }\n        }\n        finally {\n            formula.status = 'done';\n        }\n    }\n    \n    function checkVariable(obj) {\n        if (typeof obj.calc !== 'function') {\n            throw new Error('Undefined ' + obj);\n        }\n    }\n    \n    function exec(op, args, fn) {\n        for (var i = 0; i < args.length; i++) {\n            if (args[i] === op) {\n                try {\n                    if (i===0 && op==='+') {\n                        checkVariable(args[i + 1]);\n                        var r = args[i + 1].calc();\n                        args.splice(i, 2, new RawValue(r));\n                    } else {\n                        checkVariable(args[i - 1]);\n                        checkVariable(args[i + 1]);\n                        var r = fn(args[i - 1].calc(), args[i + 1].calc());\n                        args.splice(i - 1, 3, new RawValue(r));\n                        i--;\n                    }\n                }\n                catch (e) {\n                    // console.log('[Exp.js] - ' + formula.name + ': evaluating ' + formula.cell.f + '\\n' + e.message);\n                    throw e;\n                }\n            }\n        }\n    }\n\n    function exec_minus(args) {\n        for (var i = args.length; i--;) {\n            if (args[i] === '-') {\n                checkVariable(args[i + 1]);\n                var r = -args[i + 1].calc();\n                if (typeof args[i - 1] !== 'string' && i > 0) {\n                    args.splice(i, 1, '+');\n                    args.splice(i + 1, 1, new RawValue(r));\n                }\n                else {\n                    args.splice(i, 2, new RawValue(r));\n                }\n            }\n        }\n    }\n\n    self.calc = function() {\n        let args = self.args.concat();\n        exec_minus(args);\n        exec('^', args, function(a, b) {\n            return Math.pow(+a, +b);\n        });\n        exec('/', args, function(a, b) {\n            if (b == 0) {\n                throw Error('#DIV/0!');\n            }\n            return (+a) / (+b);\n        });\n        exec('*', args, function(a, b) {\n            return (+a) * (+b);\n        });\n        exec('+', args, function(a, b) {\n            return (+a) + (+b);\n        });\n        exec('&', args, function(a, b) {\n            return '' + a + b;\n        });\n        exec('<', args, function(a, b) {\n            return a < b;\n        });\n        exec('>', args, function(a, b) {\n            return a > b;\n        });\n        exec('>=', args, function(a, b) {\n            return a >= b;\n        });\n        exec('<=', args, function(a, b) {\n            return a <= b;\n        });\n        exec('<>', args, function(a, b) {\n            return a != b;\n        });\n        exec('=', args, function(a, b) {\n            return a == b;\n        });\n        if (args.length == 1) {\n            if (typeof(args[0].calc) !== 'function') {\n                return args[0];\n            }\n            else {\n                return args[0].calc();\n            }\n        }\n    };\n\n    var last_arg;\n    self.push = function(buffer) {\n        if (buffer) {\n            var v;\n            if (!isNaN(buffer)) {\n                v = new RawValue(+buffer);\n            }\n            else if (typeof buffer === 'string' && buffer.trim().replace(/\\$/g, '').match(/^[A-Z]+[0-9]+:[A-Z]+[0-9]+$/)) {\n                v = new Range(buffer.trim().replace(/\\$/g, ''), formula);\n            }\n            else if (typeof buffer === 'string' && buffer.trim().replace(/\\$/g, '').match(/^[^!]+![A-Z]+[0-9]+:[A-Z]+[0-9]+$/)) {\n                v = new Range(buffer.trim().replace(/\\$/g, ''), formula);\n            }\n            else if (typeof buffer === 'string' && buffer.trim().replace(/\\$/g, '').match(/^[A-Z]+:[A-Z]+$/)) {\n                v = new Range(buffer.trim().replace(/\\$/g, ''), formula);\n            }\n            else if (typeof buffer === 'string' && buffer.trim().replace(/\\$/g, '').match(/^[^!]+![A-Z]+:[A-Z]+$/)) {\n                v = new Range(buffer.trim().replace(/\\$/g, ''), formula);\n            }\n            else if (typeof buffer === 'string' && buffer.trim().replace(/\\$/g, '').match(/^[A-Z]+[0-9]+$/)) {\n                v = new RefValue(buffer.trim().replace(/\\$/g, ''), formula);\n            }\n            else if (typeof buffer === 'string' && buffer.trim().replace(/\\$/g, '').match(/^[^!]+![A-Z]+[0-9]+$/)) {\n                v = new RefValue(buffer.trim().replace(/\\$/g, ''), formula);\n            }\n            else if (typeof buffer === 'string' && !isNaN(buffer.trim().replace(/%$/, ''))) {\n                v = new RawValue(+(buffer.trim().replace(/%$/, '')) / 100.0);\n            }\n            else {\n                v = buffer;\n            }\n            if (((v === '=') && (last_arg == '>' || last_arg == '<')) || (last_arg == '<' && v === '>')) {\n                self.args[self.args.length - 1] += v;\n            }\n            else {\n                self.args.push(v);\n            }\n            last_arg = v;\n            //console.log(self.id, '-->', v);\n        }\n    };\n};","\"use strict\";\n\nmodule.exports = function UserFnExecutor(user_function) {\n    var self = this;\n    self.name = 'UserFn';\n    self.args = [];\n    self.calc = function() {\n        var errorValues = {\n            '#NULL!': 0x00,\n            '#DIV/0!': 0x07,\n            '#VALUE!': 0x0F,\n            '#REF!': 0x17,\n            '#NAME?': 0x1D,\n            '#NUM!': 0x24,\n            '#N/A': 0x2A,\n            '#GETTING_DATA': 0x2B\n        }, result;\n        try {\n            result = user_function.apply(self, self.args.map(f=>f.calc()));\n        } catch (e) {\n            if (user_function.name === 'is_blank'\n                && errorValues[e.message] !== undefined) {\n                // is_blank applied to an error cell doesn't propagate the error\n                result = 0;\n            } else {\n                throw e;\n            }\n        }\n        return result;\n    };\n    self.push = function(buffer) {\n        self.args.push(buffer);\n    };\n};","\"use strict\";\n\nmodule.exports = function UserRawFnExecutor(user_function) {\n    var self = this;\n    self.name = 'UserRawFn';\n    self.args = [];\n    self.calc = function() {\n        return user_function.apply(self, self.args);\n    };\n    self.push = function(buffer) {\n        self.args.push(buffer);\n    };\n};\n","\"use strict\";\n\n// +---------------------+\n// | FORMULAS REGISTERED |\n// +---------------------+\nlet formulas = {\n    'FLOOR': Math.floor,\n    '_xlfn.FLOOR.MATH': Math.floor,\n    'ABS': Math.abs,\n    'SQRT': Math.sqrt,\n    'VLOOKUP': vlookup,\n    'MAX': max,\n    'SUM': sum,\n    'MIN': min,\n    'CONCATENATE': concatenate,\n    'PMT': pmt,\n    'COUNTA': counta,\n    'IRR': irr,\n    'NORM.INV': normsInv,\n    '_xlfn.NORM.INV': normsInv,\n    'STDEV': stDeviation,\n    'AVERAGE': avg,\n    'EXP': EXP,\n    'LN': Math.log,\n    '_xlfn.VAR.P': var_p,\n    'VAR.P': var_p,\n    '_xlfn.COVARIANCE.P': covariance_p,\n    'COVARIANCE.P': covariance_p,\n    'TRIM': trim,\n    'LEN': len,\n    'ISBLANK': is_blank,\n    'HLOOKUP': hlookup,\n    'INDEX': index,\n    'MATCH': match,\n    'SUMPRODUCT': sumproduct,\n    'ISNUMBER': isnumber\n};\n\nfunction isnumber(x) {\n    return !isNaN(x);\n}\n\nfunction sumproduct() {\n    var parseNumber = function (string) {\n        if (string === undefined || string === '' || string === null) {\n            return 0;\n        }\n        if (!isNaN(string)) {\n            return parseFloat(string);\n        }\n        return 0;\n    },\n    consistentSizeRanges = function (matrixArray) {\n        var getRowCount = function(matrix) {\n                return matrix.length;\n            },\n            getColCount = function(matrix) {\n                return matrix[0].length;\n            },\n            rowCount = getRowCount(matrixArray[0]),\n            colCount = getColCount(matrixArray[0]);\n\n        for (var i = 1; i < matrixArray.length; i++) {\n            if (getRowCount(matrixArray[i]) !== rowCount\n                || getColCount(matrixArray[i]) !== colCount) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    if (!arguments || arguments.length === 0) {\n        throw Error('#VALUE!');\n    }\n    if (!consistentSizeRanges(arguments)) {\n        throw Error('#VALUE!');\n    }\n\n    var arrays = arguments.length + 1;\n    var result = 0;\n    var product;\n    var k;\n    var _i;\n    var _ij;\n    for (var i = 0; i < arguments[0].length; i++) {\n        if (!(arguments[0][i] instanceof Array)) {\n            product = 1;\n            for (k = 1; k < arrays; k++) {\n                _i = parseNumber(arguments[k - 1][i]);\n                \n                product *= _i;\n            }\n            result += product;\n        } else {\n            for (var j = 0; j < arguments[0][i].length; j++) {\n                product = 1;\n                for (k = 1; k < arrays; k++) {\n                    _ij = parseNumber(arguments[k - 1][i][j]);\n                    \n                    product *= _ij;\n                }\n                result += product;\n            }\n        }\n    }\n    return result;\n}\n\nfunction match(lookupValue, matrix, matchType) {\n    if (Array.isArray(matrix) \n        && matrix.length === 1\n        && Array.isArray(matrix[0])) {\n        matrix = matrix[0];\n    }\n    if (!lookupValue && !matrix) {\n        throw Error('#N/A');\n    }\n    \n    if (arguments.length === 2) {\n        matchType = 1;\n    }\n    if (!(matrix instanceof Array)) {\n        throw Error('#N/A');\n    }\n\n    if (matchType !== -1 && matchType !== 0 && matchType !== 1) {\n        throw Error('#N/A');\n    }\n    var index;\n    var indexValue;\n    for (var idx = 0; idx < matrix.length; idx++) {\n        if (matchType === 1) {\n            if (matrix[idx] === lookupValue) {\n                return idx + 1;\n            } else if (matrix[idx] < lookupValue) {\n                if (!indexValue) {\n                    index = idx + 1;\n                    indexValue = matrix[idx];\n                } else if (matrix[idx] > indexValue) {\n                    index = idx + 1;\n                    indexValue = matrix[idx];\n                }\n            }\n        } else if (matchType === 0) {\n            if (typeof lookupValue === 'string') {\n                lookupValue = lookupValue.replace(/\\?/g, '.');\n\n                if (Array.isArray(matrix[idx])) {\n                    if (matrix[idx].length === 1\n                        && typeof matrix[idx][0] === 'string') {\n                            if (matrix[idx][0].toLowerCase() === lookupValue.toLowerCase()) {\n                                return idx + 1;\n                            }\n                        } \n                } else if (typeof matrix[idx] === 'string') {\n                    if (matrix[idx].toLowerCase() === lookupValue.toLowerCase()) {\n                        return idx + 1;\n                    }\n                }\n            } else {\n                if (matrix[idx] === lookupValue) {\n                    return idx + 1;\n                }\n            }\n        } else if (matchType === -1) {\n            if (matrix[idx] === lookupValue) {\n                return idx + 1;\n            } else if (matrix[idx] > lookupValue) {\n                if (!indexValue) {\n                    index = idx + 1;\n                    indexValue = matrix[idx];\n                } else if (matrix[idx] < indexValue) {\n                    index = idx + 1;\n                    indexValue = matrix[idx];\n                }\n            }\n        }\n    }\n    if (!index ) {\n        throw Error('#N/A');\n    }\n    return index;\n}\n\nfunction index(matrix, row_num, column_num) {\n    if (row_num <= matrix.length) {\n        var row = matrix[row_num - 1];\n        if (Array.isArray(row)) {\n            if (!column_num) {\n                return row;\n            } else if (column_num <= row.length) {\n                return row[column_num - 1];\n            }\n        } else {\n            return matrix[row_num];\n        }\n    }\n    throw Error('#REF!');\n}\n\n// impl ported from https://github.com/FormulaPages/hlookup\nfunction hlookup(needle, table, index, exactmatch) {\n    if (typeof needle === \"undefined\" || (0, is_blank)(needle)) {\n        return null;\n    }\n\n    index = index || 0;\n    let row = table[0];\n\n    for (let i = 0; i < row.length; i++) {\n        if (exactmatch && row[i] === needle || row[i].toLowerCase().indexOf(needle.toLowerCase()) !== -1) {\n            return index < table.length + 1 ? table[index - 1][i] : table[0][i];\n        }\n    }\n\n    throw Error('#N/A');\n}\n\nfunction len(a) {\n    return ('' + a).length;\n}\n\nfunction trim(a) {\n    return ('' + a).trim();\n}\n\nfunction is_blank(a) {\n    return !a;\n}\n\nfunction covariance_p(a, b) {\n    a = getArrayOfNumbers(a);\n    b = getArrayOfNumbers(b);\n    if (a.length != b.length) {\n        return 'N/D';\n    }\n    var inv_n = 1.0 / a.length;\n    var avg_a = sum.apply(this, a) / a.length;\n    var avg_b = sum.apply(this, b) / b.length;\n    var s = 0.0;\n    for (var i = 0; i < a.length; i++) {\n        s += (a[i] - avg_a) * (b[i] - avg_b);\n    }\n    return s * inv_n;\n}\n\nfunction getArrayOfNumbers(range) {\n    var arr = [];\n    for (var i = 0; i < range.length; i++) {\n        var arg = range[i];\n        if (Array.isArray(arg)) {\n            var matrix = arg;\n            for (var j = matrix.length; j--;) {\n                if (typeof(matrix[j]) == 'number') {\n                    arr.push(matrix[j]);\n                }\n                else if (Array.isArray(matrix[j])) {\n                    for (var k = matrix[j].length; k--;) {\n                        if (typeof(matrix[j][k]) == 'number') {\n                            arr.push(matrix[j][k]);\n                        }\n                    }\n                }\n                // else {\n                //   wtf is that?\n                // }\n            }\n        }\n        else {\n            if (typeof(arg) == 'number') {\n                arr.push(arg);\n            }\n        }\n    }\n    return arr;\n}\n\nfunction var_p() {\n    var average = avg.apply(this, arguments);\n    var s = 0.0;\n    var c = 0;\n    for (var i = 0; i < arguments.length; i++) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var matrix = arg;\n            for (var j = matrix.length; j--;) {\n                for (var k = matrix[j].length; k--;) {\n                    if (matrix[j][k] !== null && matrix[j][k] !== undefined) {\n                        s += Math.pow(matrix[j][k] - average, 2);\n                        c++;\n                    }\n                }\n            }\n        }\n        else {\n            s += Math.pow(arg - average, 2);\n            c++;\n        }\n    }\n    return s / c;\n}\n\nfunction EXP(n) {\n    return Math.pow(Math.E, n);\n}\n\nfunction avg() {\n    return sum.apply(this, arguments) / counta.apply(this, arguments);\n}\n\nfunction stDeviation() {\n    var array = getArrayOfNumbers(arguments);\n\n    function _mean(array) {\n        return array.reduce(function(a, b) {\n            return a + b;\n        }) / array.length;\n    }\n    var mean = _mean(array),\n        dev = array.map(function(itm) {\n            return (itm - mean) * (itm - mean);\n        });\n    return Math.sqrt(dev.reduce(function(a, b) {\n        return a + b;\n    }) / (array.length - 1));\n}\n\n/// Original C++ implementation found at http://www.wilmott.com/messageview.cfm?catid=10&threadid=38771\n/// C# implementation found at http://weblogs.asp.net/esanchez/archive/2010/07/29/a-quick-and-dirty-implementation-of-excel-norminv-function-in-c.aspx\n/*\n *     Compute the quantile function for the normal distribution.\n *\n *     For small to moderate probabilities, algorithm referenced\n *     below is used to obtain an initial approximation which is\n *     polished with a final Newton step.\n *\n *     For very large arguments, an algorithm of Wichura is used.\n *\n *  REFERENCE\n *\n *     Beasley, J. D. and S. G. Springer (1977).\n *     Algorithm AS 111: The percentage points of the normal distribution,\n *     Applied Statistics, 26, 118-121.\n *\n *      Wichura, M.J. (1988).\n *      Algorithm AS 241: The Percentage Points of the Normal Distribution.\n *      Applied Statistics, 37, 477-484.\n */\nfunction normsInv(p, mu, sigma) {\n    if (p < 0 || p > 1) {\n        throw \"The probality p must be bigger than 0 and smaller than 1\";\n    }\n    if (sigma < 0) {\n        throw \"The standard deviation sigma must be positive\";\n    }\n\n    if (p == 0) {\n        return -Infinity;\n    }\n    if (p == 1) {\n        return Infinity;\n    }\n    if (sigma == 0) {\n        return mu;\n    }\n\n    var q, r, val;\n\n    q = p - 0.5;\n\n    /*-- use AS 241 --- */\n    /* double ppnd16_(double *p, long *ifault)*/\n    /*      ALGORITHM AS241  APPL. STATIST. (1988) VOL. 37, NO. 3\n            Produces the normal deviate Z corresponding to a given lower\n            tail area of P; Z is accurate to about 1 part in 10**16.\n    */\n    if (Math.abs(q) <= .425) { /* 0.075 <= p <= 0.925 */\n        r = .180625 - q * q;\n        val =\n            q * (((((((r * 2509.0809287301226727 +\n                            33430.575583588128105) * r + 67265.770927008700853) * r +\n                        45921.953931549871457) * r + 13731.693765509461125) * r +\n                    1971.5909503065514427) * r + 133.14166789178437745) * r +\n                3.387132872796366608) / (((((((r * 5226.495278852854561 +\n                        28729.085735721942674) * r + 39307.89580009271061) * r +\n                    21213.794301586595867) * r + 5394.1960214247511077) * r +\n                687.1870074920579083) * r + 42.313330701600911252) * r + 1);\n    }\n    else { /* closer than 0.075 from {0,1} boundary */\n\n        /* r = min(p, 1-p) < 0.075 */\n        if (q > 0)\n            r = 1 - p;\n        else\n            r = p;\n\n        r = Math.sqrt(-Math.log(r));\n        /* r = sqrt(-log(r))  <==>  min(p, 1-p) = exp( - r^2 ) */\n\n        if (r <= 5) { /* <==> min(p,1-p) >= exp(-25) ~= 1.3888e-11 */\n            r += -1.6;\n            val = (((((((r * 7.7454501427834140764e-4 +\n                                .0227238449892691845833) * r + .24178072517745061177) *\n                            r + 1.27045825245236838258) * r +\n                        3.64784832476320460504) * r + 5.7694972214606914055) *\n                    r + 4.6303378461565452959) * r +\n                1.42343711074968357734) / (((((((r *\n                                1.05075007164441684324e-9 + 5.475938084995344946e-4) *\n                            r + .0151986665636164571966) * r +\n                        .14810397642748007459) * r + .68976733498510000455) *\n                    r + 1.6763848301838038494) * r +\n                2.05319162663775882187) * r + 1);\n        }\n        else { /* very close to  0 or 1 */\n            r += -5;\n            val = (((((((r * 2.01033439929228813265e-7 +\n                                2.71155556874348757815e-5) * r +\n                            .0012426609473880784386) * r + .026532189526576123093) *\n                        r + .29656057182850489123) * r +\n                    1.7848265399172913358) * r + 5.4637849111641143699) *\n                r + 6.6579046435011037772) / (((((((r *\n                            2.04426310338993978564e-15 + 1.4215117583164458887e-7) *\n                        r + 1.8463183175100546818e-5) * r +\n                    7.868691311456132591e-4) * r + .0148753612908506148525) * r + .13692988092273580531) * r +\n                .59983220655588793769) * r + 1);\n        }\n\n        if (q < 0.0) {\n            val = -val;\n        }\n    }\n\n    return mu + sigma * val;\n}\n\nfunction irr(range, guess) {\n    var min = -2.0;\n    var max = 1.0;\n    var n = 0;\n    do {\n        var guest = (min + max) / 2;\n        var NPV = 0;\n        for (var i = 0; i < range.length; i++) {\n            var arg = range[i];\n            NPV += arg[0] / Math.pow((1 + guest), i);\n        }\n        if (NPV > 0) {\n            if (min === max) {\n                max += Math.abs(guest);\n            }\n            min = guest;\n        }\n        else {\n            max = guest;\n        }\n        n++;\n    } while (Math.abs(NPV) > 0.000001 && n < 100000);\n    //console.log(n);\n    return guest;\n}\n\nfunction counta() {\n    var r = 0;\n    for (var i = arguments.length; i--;) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var matrix = arg;\n            for (var j = matrix.length; j--;) {\n                for (var k = matrix[j].length; k--;) {\n                    if (matrix[j][k] !== null && matrix[j][k] !== undefined) {\n                        r++;\n                    }\n                }\n            }\n        }\n        else {\n            if (arg !== null && arg !== undefined) {\n                r++;\n            }\n        }\n    }\n    return r;\n}\n\nfunction pmt(rate_per_period, number_of_payments, present_value, future_value, type) {\n    type = type || 0;\n    future_value = future_value || 0;\n    if (rate_per_period != 0.0) {\n        // Interest rate exists\n        var q = Math.pow(1 + rate_per_period, number_of_payments);\n        return -(rate_per_period * (future_value + (q * present_value))) / ((-1 + q) * (1 + rate_per_period * (type)));\n\n    }\n    else if (number_of_payments != 0.0) {\n        // No interest rate, but number of payments exists\n        return -(future_value + present_value) / number_of_payments;\n    }\n    return 0;\n}\n\nfunction concatenate() {\n    var r = '';\n    for (var i = 0; i < arguments.length; i++) {\n        var arg = arguments[i];\n        if (arg === null || arg === undefined) continue;\n        r += arg;\n    }\n    return r;\n}\n\nfunction sum() {\n    var r = 0;\n    for (var i = arguments.length; i--;) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var matrix = arg;\n            for (var j = matrix.length; j--;) {\n                for (var k = matrix[j].length; k--;) {\n                    if (!isNaN(matrix[j][k])) {\n                        r += +matrix[j][k];\n                    }\n                }\n            }\n        }\n        else {\n            r += +arg;\n        }\n    }\n    return r;\n}\n\nfunction max() {\n    var max = null;\n    for (var i = arguments.length; i--;) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var arr = arg;\n            for (var j = arr.length; j--;) {\n                max = max == null || max < arr[j] ? arr[j] : max;\n            }\n        }\n        else if (!isNaN(arg)) {\n            max = max == null || max < arg ? arg : max;\n        }\n        else {\n            console.log('WTF??', arg);\n        }\n    }\n    return max;\n}\n\nfunction min() {\n    var result = null;\n    for (var i = arguments.length; i--;) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var arr = arg;\n            for (var j = arr.length; j--;) {\n                result = result == null || result > arr[j] ? arr[j] : result;\n            }\n        }\n        else if (!isNaN(arg)) {\n            result = result == null || result > arg ? arg : result;\n        }\n        else {\n            console.log('WTF??', arg);\n        }\n    }\n    return result;\n}\n\nfunction vlookup(key, matrix, return_index) {\n    for (var i = 0; i < matrix.length; i++) {\n        if (matrix[i][0] == key) {\n            return matrix[i][return_index - 1];\n        }\n    }\n    throw Error('#N/A');\n}\n\nmodule.exports = formulas;\n","\"use strict\";\n\nconst int_2_col_str = require('./int_2_col_str.js');\nconst col_str_2_int = require('./col_str_2_int.js');\nconst RawValue = require('./RawValue.js');\nconst Range = require('./Range.js');\nconst RefValue = require('./RefValue.js');\n\nfunction raw_offset(cell_ref, rows, columns, height, width) {\n    height = (height || new RawValue(1)).calc();\n    width = (width || new RawValue(1)).calc();\n    if (cell_ref.args.length === 1 && cell_ref.args[0].name === 'RefValue') {\n        var ref_value = cell_ref.args[0];\n        var parsed_ref = ref_value.parseRef();\n        var col = col_str_2_int(parsed_ref.cell_name) + columns.calc();\n        var col_str = int_2_col_str(col);\n        var row = +parsed_ref.cell_name.replace(/^[A-Z]+/g, '') + rows.calc();\n        var cell_name = col_str + row;\n        if (height === 1 && width === 1) {\n            return new RefValue(cell_name, ref_value.formula).calc();\n        }\n        else {\n            var end_range_col = int_2_col_str(col + width - 1);\n            var end_range_row = row + height - 1;\n            var end_range = end_range_col + end_range_row;\n            var str_expression = parsed_ref.sheet_name + '!' + cell_name + ':' + end_range;\n            return new Range(str_expression, ref_value.formula).calc();\n        }\n    }\n}\n\nfunction iferror(cell_ref, onerrorvalue) {\n    try {\n        var value = cell_ref.calc();\n        if (typeof value === 'number' && (isNaN(value) || value === Infinity || value === -Infinity)) {\n            return onerrorvalue.calc();\n        }\n        return value;\n    } catch(e) {\n        return onerrorvalue.calc();\n    }\n}\n\nfunction _if(condition, _then, _else) {\n    if (condition.calc()) {\n        return _then.calc();\n    }\n    else {\n        return _else.calc();\n    }\n}\n\nfunction and() {\n    for (var i = 0; i < arguments.length; i++) {\n        if(!arguments[i].calc()) return false;\n    }\n    return true;\n}\n\nmodule.exports = {\n    'OFFSET': raw_offset,\n    'IFERROR': iferror,\n    'IF': _if,\n    'AND': and\n};\n","\"use strict\";\n\nconst RawValue = require('./RawValue.js');\nconst find_all_cells_with_formulas = require('./find_all_cells_with_formulas.js');\n\nclass Calculator {\n    \n    constructor(workbook, exec_formula) {\n        this.workbook = workbook;\n        this.expressions = [];\n        this.exec_formula = exec_formula;\n        this.variables = {};\n        let formulas = find_all_cells_with_formulas(workbook, exec_formula);\n        for (let i = formulas.length - 1; i >= 0; i--) {\n            let exp = exec_formula.build_expression(formulas[i]);\n            this.expressions.push(exp);\n        }\n    }\n    \n    setVar(var_name, value) {\n        let variable = this.variables[var_name];\n        if (variable) {\n            variable.setValue(value);\n        } else {\n            this.expressions.forEach(exp => {\n                this.setVarOfExpression(exp, var_name, value);\n            });\n        }\n    }\n    \n    getVars() {\n        let vars = {};\n        for (let k in this.variables) {\n            vars[k] = this.variables[k].calc();\n        }\n        return vars;\n    }\n    \n    setVarOfExpression(exp, var_name, value) {\n        for (let i = 0; i < exp.args.length; i++) {\n            let arg = exp.args[i];\n            if (arg === var_name) {\n                exp.args[i] = this.variables[var_name] || (this.variables[var_name] = new RawValue(value));\n            } else if (typeof arg === 'object' && (arg.name === 'Expression' || arg.name === 'UserFn')) {\n                this.setVarOfExpression(arg, var_name, value);\n            }\n        }\n    }\n    \n    execute() {\n        this.expressions.forEach(exp => {\n            exp.update_cell_value();\n        });\n    }\n}\n\nmodule.exports = Calculator;"],"sourceRoot":""}